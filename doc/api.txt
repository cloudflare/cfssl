CFSSL API

1. OVERVIEW

The CFSSL API allows applications to access the functionality of
CFSSL over an unauthenticated HTTP connection. Due to the fact that
the API is currently unauthenticated, it is important to understand
that the CFSSL API server must be running in a trusted environment.

The API currently provides endpoints for the following functions:

    1. signing (the CA will sign the certificate)
    2. bundling (the CA will return a certificate bundle)
    3. certificate validation
    4. remote certificate validation


2. ENDPOINTS

Endpoints return JSON-encoded responses in the standard format described
below. Except where noted, the request body should be a dictionary of
string keys to string values. For example:

       {
         "key": "value",
         "key2": "value2"
       }

Responses take the form of the new CloudFlare API response format:

       {
         "result": {<certificate bundle JSON>},
         "success": true,
         "errors": [],
         "messages": [],
       }

Both the "messages" and "errors" fields have the same general format:
a message or error has the form

       {
         "code:" 1234,
         "message": "Informative message."
       }

2.1 SIGNING

Endpoint: "/api/v1/cfssl/sign"
Method: POST
Parameters:
        * hostname: the SAN to use for the new certificate
        * certificate_request: the PEM-encoded certificate request that
        should be signed
        * profile (optional): the name of the signing profile to be
        used. If empty, the server's default profile will be
        selected.
        * subject (optional): subject information to use for the
        certificate instead of the information contained in the
        CSR.

The subject contains:
        * hosts: an array of strings containing DNS names and IP
        addresses that should be used as the Subject Alternative Names
        for the certificate.
        * names: a list of subject name elements. A subject name
        contains the following elements:
          * 'C': the two-letter country identifier
          * 'L': the locale (e.g. city)
          * 'O': the organisation
          * 'OU': the organisational unit
          * 'ST': the state or province
        * CN: the certificate's Common Name.

Result: { "certificate": "-----BEGIN CERTIFICATE..." }

2.2 BUNDLING

Endpoint: "/api/v1/cfssl/bundle"
Method: POST
Required Parameters:

        One of the following two parameters is required; If both are
        present, "domain" becomes one of optional parameters with
        "certificate", read on for details.

        * certificate: the PEM-encoded certificate to be bundled.
        * domain: a domain name indicating a remote host to retrieve a
          certificate for.

        If the "certificate" parameter is present, the following four
        parameters are valid:

        * private_key: the PEM-encoded private key to be included with
        the bundle. This is valid only if the server is not running in
        "keyless" mode.
        * flavor: one of "ubiquitous" or "optimal", with a default
        value of "ubiquitous". A ubiquitous bundle is one that has a
        higher probability of being verified everywhere, even by
        clients using outdated or unusual trust stores.
        * domain: the domain name to verify as the hostname of the
        certificate.
        * ip: the IP address to verify against the certificate IP SANs

        If only the "domain" parameter is present, the following
        parameter is valid:

        * ip: the IP address of the remote host as an alternative to
        domain.

Example:
        curl -XPOST -H "Content-Type: application/json" \
             -d '{"domain": "cloudflare.com"}'          \
             127.0.0.1:8888/api/v1/cfssl/bundle

Result:

        A bundle has a number of components:

        * bundle contains the concatenated list of PEM certificates
        forming the certificate chain; this forms the actual
        bundle. The remaining parameters are additional metadata
        supporting the bundle.
        * crl_support is true if CRL information is contained in the
        certificate.
        * crt contains the original certificate the bundle is built
        from.
        * expires contains the expiration date of the certificate.
        * hostnames contains the SAN hostnames for the certificate.
        * issuer contains the X.509 issuer information for the
        certificate.
        * key contains the private key for the certificate, if one
        was presented.
        * key_size contains the size of the key in bits for the
        certificate. It will be present even if the private key wasn't
        provided because this can be determined from the public key.
        * key_type contains a textual description of the key type,
        e.g. '2048-bit RSA'.
        * ocsp contains the OCSP URLs for the certificate, if present.
        * ocsp_support will be true if the certificate supports OCSP
        revocation checking.
        * signature contains the signature type used in the
        certificate, e.g. 'SHA1WithRSA'.
        * status contains a number of elements:
          * expiring_SKIs contains the SKIs (subject key identifiers)
          for any certificates that might expire soon (within 30
          days).
          * rebundled indicates whether the server had to rebundle the
          certificate. The server will rebundle the uploaded
          certificate as needed; for example, if the certificate
          contains none of the required intermediates or a better set
          of intermediates was found. In this case, the server will
          mark rebundled as true.
          * untrusted_root_stores contains the names of any new root
          stores found while building a trust chain. New roots cannot
          be trusted while the server is running, but this might be
          useful in discovering new certificate authorities.
        * subject contains the X.509 subject identifier from the
        certificate.

2.3 CERTIFICATE REQUESTS

Endpoint: "/api/v1/cfssl/newkey"
Method: POST
Required parameters:

         * hosts: a list of hostnames to be used for the certificate.
         * key: should contain two parameters:
           * algo: either 'rsa' or 'ecdsa'
           * size: integer size in bits of key
         * names: a list of subject name elements. A subject name
         contains the following elements:
           * 'C': the two-letter country identifier
           * 'L': the locale (e.g. city)
           * 'O': the organisation
           * 'OU': the organisational unit
           * 'ST': the state or province

Optional parameters:

         * CN: the certificate's Common Name.

Example:

    csr.json:
    {
        "hosts": [
            "example.com",
            "www.example.com"
        ],
        "key": {
            "algo": "rsa",
            "size": 2048
        },
        "names": [
            {
                "C": "US",
                "L": "San Francisco",
                "O": "Example Organisation",
                "ST": "California"
            }
        ]
    }

    cURL call:
    curl -XPOST -H "Content-Type: application/json" -d @csr.json \
         127.0.0.1:8888/api/v1/cfssl/newkey

Result:
        * key contains the PEM-encoded private key.
        * csr contains a PEM-encoded certificate signature request.

2.4. SIGNED CERTIFICATE REQUESTS

Endpoint: "/api/v1/cfssl/newcert"
Method: POST
Required parameters:

         * hostname: the hostname for the certificate
         * request: contains a newkey request (see section 2.3)

Optional parameters:

         * profile: names the profile that should be used for the
         the new certificate.
         * remote (optional): the remote CFSSL that should perform the
         signing. This might be used, for example, to generate the key
         on a local CFSSL instance, but use another CFSSL instance for
         signatures.

Example:

    csr.json:
    {
        "hostname": "example.com",
        "request": {
            "hosts": [
                "example.com",
                "www.example.com"
            ],
            "key": {
                "algo": "rsa",
                "size": 2048
            },
            "names": [
                {
                    "C": "US",
                    "L": "San Francisco",
                    "O": "Example Organisation",
                    "ST": "California"
                }
            ]
        }
    }

    cURL call:
    curl -XPOST -H "Content-Type: application/json" -d @csr.json \
         127.0.0.1:8888/api/v1/cfssl/newcert
 
2.5 REMOTE SIGNED CERTIFICATE REQUESTS

The remote endpoint used for signatures here is defined when cfssl
starts up, and clients do not provide address information for the remote
CFSSL server. It is identical in use to newcert; it generates a key and
CSR locally, and submits the CSR to the remote cfssl for signing.

Endpoint: "/api/v1/cfssl/remotecert"
Method: POST
Required parameters:

         * hostname: the hostname for the certificate
         * request: contains a newkey request (see section 2.3)
         * profile: names the profile that should be used for the
           the new certificate.

Example:

    csr.json:
    {
        "hostname": "example.com",
        "request": {
            "hosts": [
                "example.com",
                "www.example.com"
            ],
            "key": {
                "algo": "rsa",
                "size": 2048
            },
            "names": [
                {
                    "C": "US",
                    "L": "San Francisco",
                    "O": "Example Organisation",
                    "ST": "California"
                }
            ]
        }
    }

    cURL call:
    curl -XPOST -H "Content-Type: application/json" -d @csr.json \
         127.0.0.1:8888/api/v1/cfssl/newcert

2.6 INFO

The info endpoint returns a list of information on all the CA's
certificates (those corresponding to the CA's private keys).

Endpoint: "/api/v1/cfssl/info"
Method: GET

Example:

    cURL call:
    curl 127.0.0.1:8888/api/v1/cfssl/info | python -m json.tool

2.7 SCAN

The scaninfo endpoint returns the list of options for scanning

Endpoint: "/api/v1/cfssl/scaninfo"
Method: GET

Example:

    cURL call:
    curl 127.0.0.1:8888/api/v1/cfssl/scaninfo


The scan endpoint returns the output of the scan of a remote server

Endpoint: "/api/v1/cfssl/scan"
Method: GET
Required parameters:

         * host: the hostname for the certificate

Optional parameters:
         * scanner: regular expression specifying scanner(s) to run
         * family:  regular expression specifying scan famil(ies) to run

Example:

    cURL call:
    curl 127.0.0.1:8888/api/v1/cfssl/scan?host=example.com


3. CONFIGURATION

`cfssl` takes an optional configuration file; this is currently used to
define profiles for new certificates. The configuration is JSON-encoded,
and currently have only one field:

        * signing: an object with two fields:
          * default: the default profile to use for requests that do
            not explicitly set a profile.
          * profiles: a dictionary of signing profiles.
        * auth_keys: a dictionary containing authentication keys
        * remotes: a dictionary containing remote servers

The following is an example of a valid configuration that defines a
default expiry of one week, and a configuration that is applicable for a
web server. For if the profile "www" is chosen, it will connect to a
remote server "cfsslserver.com:8888" with the standard authentication
mechanism and key "00000000000000000000000000000000".

{
    "signing": {
        "default": {
            "expiry": "168h"
        },
        "profiles": {
            "www": {
                "usages": [
                    "signing",
                    "key encipherment",
                    "server auth"
                ]
                "auth_key": "myauthkey",
                "remote": "myremoteserver"
            }
        }
    },
    "auth_keys": {
        "myauthkey": {
            "type": "standard",
            "key": "00000000000000000000000000000000"
        }
    },
    "remotes": {
        "myremoteserver": "cfsslserver.com:8888"
    }
}

3.1 CERTIFICATE SIGNING CONFIGURATION

The "signing" field has two members:

          * default: the default profile to use for requests that do
            not explicitly set a profile.
          * profiles: a dictionary of signing profiles.


If no default is provided, the following default is used:

{
        "usages": [
            "signing",
            "key encipherment",
            "server auth",
            "client auth"
        ],
        "expiry": "8760h"
}

This specifies a set of default usages that are appropriate for most end
certificates, and a default expiry of one year.

Valid key uses are:
        signing / digital signature
        content committment
        key encipherment / data encipherment
        cert sign
        crl sign
        encipher only
        decipher only
        server auth
        client auth
        code signing
        email protection / s/mime
        ipsec end system
        ipsec tunnel
        ipsec user
        timestamping
        ocsp signing
        microsoft sgc
        netscape sgc
        any

Here is an example of a configuration file that defines three profiles,
one for web servers, one for client certificates (i.e. for mutual
authentication), and one for intermediate certificates:

{
        "signing": {
                "default": {
                        "expiry": "168h"
                },
                "profiles": {
                        "www": {
                                "usages": [
                                        "signing",
                                        "key encipherment",
                                        "server auth"
                                ],
                                "expiry": "168h"
                        },
                        "client": {
                                "usages": [
                                        "signing",
                                        "key encipherment",
                                        "client auth"
                                ],
                               "expiry": "168h"
                        },
                        "intermediate": {
                                "usages": [
                                        "signing",
                                        "key encipherment",
                                        "cert sign",
                                        "crl sign"
                                ],
                                "expiry": "720h"
                        }
                }
        }
}

